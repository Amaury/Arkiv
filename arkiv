#!/bin/bash

# quiet mode
QUIET_MODE=0

# Remove spaces at the beginning and at the end of a character string
trim() {
	RESULT=$(echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	echo $RESULT
}

# Write string to stdout only if the program is attached to a terminal
myecho() {
	if [ -t 1 ] && [ "$QUIET_MODE" = "0" ]; then
		echo "$1"
	fi
}

# Write ANSI-compatible statements
ansi() {
	if [ "$1" = "reset" ]; then
		tput sgr0
	elif [ "$1" = "bold" ]; then
		tput bold
	elif [ "$1" = "dim" ]; then
		tput dim
	elif [ "$1" = "rev" ]; then
		tput rev
	elif [ "$1" = "under" ]; then
		tput smul
	elif [ "$1" = "fg" ]; then
		case "$2" in
			"black")	tput setaf 0
			;;
			"red")		tput setaf 1
			;;
			"green")	tput setaf 2
			;;
			"yellow")	tput setaf 3
			;;
			"blue")		tput setaf 4
			;;
			"magenta")	tput setaf 5
			;;
			"cyan")		tput setaf 6
			;;
			"white")	tput setaf 7
			;;
		esac
	elif [ "$1" = "bg" ]; then
		case "$2" in
			"black")	tput setab 0
			;;
			"red")		tput setab 1
			;;
			"green")	tput setab 2
			;;
			"yellow")	tput setab 3
			;;
			"blue")		tput setab 4
			;;
			"magenta")	tput setab 5
			;;
			"cyan")		tput setab 6
			;;
			"white")	tput setab 7
			;;
		esac
	fi
}

# Show help and exit
main_usage() {
	myecho "$(ansi bold)arkiv$(ansi reset) help|config|exec $(ansi dim)[--quiet]$(ansi reset)"
	myecho
	myecho "    $(ansi bold)help$(ansi reset)      Display this help."
	myecho "    $(ansi bold)config$(ansi reset)    Create Arkiv's configuration file."
	myecho "    $(ansi bold)exec$(ansi reset)      Backup files and databases, archive them and purge old files."
	myecho
	myecho "    $(ansi dim)--quiet$(ansi reset)    Don't write information messages."
	exit 0
}

# Manage configuration
main_config() {
	# local host
	HOST=`hostname`
	read -p " $(ansi fg yellow)Local host name? [$HOST]$(ansi reset) " ANSWER
	CONF_LOCAL_HOSTNAME=$(trim "$ANSWER")
	if [ "$CONF_LOCAL_HOSTNAME" = "" ]; then
		CONF_LOCAL_HOSTNAME="$HOST"
	fi
	# local archive path
	read -p " $(ansi fg yellow)Path to local archives? [$(ansi reset)/var/archives$(ansi fg yellow)]$(ansi reset) " ANSWER
	CONF_LOCAL_PATH=$(trim "$ANSWER")
	if [ "$CONF_LOCAL_PATH" = "" ]; then
		CONF_LOCAL_PATH="/var/archives"
	fi
	if [ ! -d $CONF_LOCAL_PATH ]; then
		read -p " $(ansi fg red)⚠ Directory '$ANSWER' doesn't exist. Create it? [Y/n]$(ansi reset) " ANSWER
		if [ "$ANSWER" = "n" ] || [ "$ANSWER" = "N" ]; then
			echo " $(ansi fg red)⚠ ABORT$(ansi reset)"
			exit 1
		fi
		if ! mkdir $CONF_LOCAL_PATH; then
			echo " $(ansi fg red)⚠ Unable to create directory. ABORT$(ansi reset)"
			exit 1
		fi
	fi
	# path to backup
	read -p " $(ansi fg yellow)Paths to backup? (separated with spaces)$(ansi reset) $(ansi dim)(example: $(ansi reset)/home /etc$(ansi dim))$(ansi reset) " ANSWER
	CONF_SRC=$(trim "$ANSWER")
	if [ "$CONF_SRC" = "" ]; then
		read -p " $(ansi fg red)Are you sure that you don't want to backup any file? [y/N] $(ansi reset)" ANSWER
		if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
			echo " $(ansi fg red)⚠ Nothing to backup. ABORT$(ansi reset)"
			exit 1
		fi
	fi
	# MySQL
	CONF_MYSQL="no"
	read -p " $(ansi fg yellow)Backup MySQL databases? [Y/n]$(ansi reset) " ANSWER
	if [ "$ANSWER" != "n" ] && [ "$ANSWER" != "N" ]; then
		CONF_MYSQL="yes"
		read -p " $(ansi fg yellow)MySQL hostname? (leave empty for localhost)$(ansi reset) " ANSWER
		CONF_MYSQL_HOST=$(trim "$ANSWER")
		if [ "$CONF_MYSQL_HOST" = "" ]; then
			CONF_MYSQL_HOST="localhost"
		fi
		read -p " $(ansi fg yellow)MySQL user?$(ansi reset) $(ansi dim)(example: $(ansi reset)root$(ansi dim))$(ansi reset) " ANSWER
		CONF_MYSQL_USER=$(trim "$ANSWER")
		if [ "$CONF_MYSQL_USER" = "" ]; then
			echo " $(ansi fg red)⚠ Empty user name. ABORT$(ansi reset)"
			exit 1
		fi
		read -s -p " $(ansi fg yellow)MySQL password?$(ansi reset) " ANSWER
		CONF_MYSQL_PWD=$(trim "$ANSWER")
		if [ "$CONF_MYSQL_PWD" = "" ]; then
			echo " $(ansi fg red)⚠ Empty password. ABORT$(ansi reset)"
			exit 1
		fi
		echo
		read -p " $(ansi fg yellow)List of databases? (separated with spaces)$(ansi reset) " ANSWER
		CONF_MYSQL_BASES=$(trim "$ANSWER")
		if [ "$CONF_MYSQL_BASES" = "" ]; then
			echo " $(ansi fg red)⚠ No database to backup. ABORT$(ansi reset)"
			exit 1
		fi
	fi
	# Amazon S3
	read -p " $(ansi fg yellow)Archive to Amazon S3? [Y/n]$(ansi reset) " ANSWER
	if [ "$ANSWER" = "n" ] || [ "$ANSWER" = "N" ]; then
		CONF_AWS_S3="no"
		echo "AWS_S3=no" >> ~/.arkiv
	else
		CONF_AWS_S3="yes"
		echo "AWS_S3=yes" >> ~/.arkiv
		read -p " $(ansi fg yellow)Bucket name?$(ansi reset) " ANSWER
		if [ "$ANSWER" = "" ]; then
			echo "$(ansi fg red) ⚠ Bad bucket name$(ansi reset)"
			exit 1
		fi
		CONF_S3_BUCKET=$(trim "$ANSWER")
	fi
	# local purge
	read -p " $(ansi fg yellow)Delay for local purge?$(ansi reset) $(ansi dim)(examples: \"$(ansi reset)3 days$(ansi dim)\" \"$(ansi reset)2 weeks$(ansi dim)\" \"$(ansi reset)2 months$(ansi dim)\")$(ansi reset) " ANSWER
	CONF_LOCAL_PURGE_DELAY=$(trim "$ANSWER")
	if [ "$CONF_LOCAL_PURGE_DELAY" = "" ]; then
		read -p " $(ansi fg red)⚠ Are you sure you want to never purge any backup file? [y/N] " ANSWER
		if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
			echo " $(ansi fg red)⚠ Empty purge delay. ABORT$(ansi reset)"
			exit 1
		fi
	fi
	# S3 purge
	read -p " $(ansi fg yellow)Delay for Amazon S3 purge?$(ansi reset) $(ansi dim)(examples: \"$(ansi reset)3 days$(ansi dim)\" \"$(ansi reset)2 weeks$(ansi dim)\" \"$(ansi reset)2 months$(ansi dim)\")$(ansi reset) " ANSWER
	CONF_S3_PURGE_DELAY=$(trim "$ANSWER")
	if [ "$CONF_S3_PURGE_DELAY" = "" ]; then
		read -p " $(ansi fg red)⚠ Are you sure you want to never purge any archived file? [y/N] " ANSWER
		if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
			echo " $(ansi fg red)⚠ Empty purge delay. ABORT$(ansi reset)"
			exit 1
		fi
	fi
	# write result
	read -p " $(ansi fg yellow)Ready to erase file '$(ansi reset)~/.arkiv$(ansi fg yellow)' and rebuild it? [y/N]$(ansi reset) " ANSWER
	if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
		echo " $(ansi fg red)⚠ ABORT$(ansi reset)"
		exit 1
	fi
	if ! rm ~/.arkiv ||
	   ! touch ~/.arkiv ||
	   ! chmod 600 ~/.arkiv; then
		echo " $(ansi fg red)⚠ Unable to manage the file '$(ansi reset)~/.arkiv$(ansi fg red)'. ABORT$(ansi reset)"
		exit 1
	fi
	echo "CONF_LOCAL_HOSTNAME=$CONF_LOCAL_HOSTNAME" >> ~/.arkiv
	echo "CONF_LOCAL_PATH=$CONF_LOCAL_PATH" >> ~/.arkiv
	echo "CONF_SRC=$CONF_SRC" >> ~/.arkiv
	echo "CONF_MYSQL=$CONF_MYSQL" >> ~/.arkiv
	if [ "$CONF_MYSQL" = "yes" ]; then
		echo "CONF_MYSQL_HOST=$CONF_MYSQL_HOST" >> ~/.arkiv
		echo "CONF_MYSQL_USER=$CONF_MYSQL_USER" >> ~/.arkiv
		echo "CONF_MYSQL_PWD=$CONF_MYSQL_PWD" >> ~/.arkiv
		echo "CONF_MYSQL_BASES=$CONF_MYSQL_BASES" >> ~/.arkiv
	fi
	echo "CONF_AWS_S3=$CONF_AWS_S3" >> ~/.arkiv
	if [ "$CONF_AWS_S3" = "yes" ]; then
		echo "CONF_S3_BUCKET=$CONF_S3_BUCKET" >> ~/.arkiv
	fi
	echo "CONF_LOCAL_PURGE_DELAY=$CONF_LOCAL_PURGE_DELAY" >> ~/.arkiv
	echo "CONF_S3_PURGE_DELAY=$CONF_S3_PURGE_DELAY" >> ~/.arkiv
}

# Backup files, archive and purge
exec_process() {
	# configuration
	if [ ! -r ~/.arkiv ]; then
		myecho "$(ansi fg red) ⚠ Unable to read file '$(ansi reset)~/.arkiv$(ansi fg red)'. ABORT$(ansi reset)"
		exit 1
	else
		. ~/.arkiv
	fi
	# current date
	CURRENT_DATE=`date +%Y-%m-%d`
	mkdir -p $CONF_LOCAL_PATH/$CURRENT_DATE
	# backup files
	if [ "$CONF_SRC" != ""]; then
		myecho "$(ansi rev)Backup files$(ansi reset)"
		for SRC in $CONF_SRC; do
			myecho "$(ansi bold)Backup path '$(ansi reset)$SRC$(ansi bold)'$(ansi reset)"
			FILENAME=$(echo $SRC | sed 's/\//-/g' | sed -e 's/^-*//' -e 's/-*$//')
			tar czf $CONF_LOCAL_PATH/$CURRENT_DATE/$FILENAME.tgz $SRC
		done
		myecho
	fi
	# backup mysql
	if [ "$CONF_MYSQL" = "yes" ]; then
		myecho "$(ansi rev)Backup databases$(ansi reset)"
		for DB_NAME in $CONF_BASES; do
			myecho "$(ansi bold)Backup database '$(ansi reset)$DB_NAME($ansi bold)'$(ansi reset)"
			MYSQL_PWD="$CONF_MYSQL_PWD" mysqldump -u $CONF_MYSQL_USER --single-transaction --skip-lock-tables $DB_NAME -h $CONF_MYSQL_HOST > $CONF_LOCAL_PATH/$CURRENT_DATE/$DB_NAME.sql
			myecho "$(ansi bold)Compress backup file for '$(ansi reset)$DB_NAME($ansi bold)'$(ansi reset)"
			gzip $CONF_LOCAL_PATH/$CURRENT_DATE/$DB_NAME.sql
		done
		myecho
	fi
	# archive
	if [ "$CONF_AWS_S3" = "yes" ]; then
		myecho "$(ansi rev)Archive on Amazon S3$(ansi reset)"
		aws s3 sync $CONF_LOCAL_PATH/$CURRENT_DATE s3://$CONF_S3_BUCKET/$CONF_LOCAL_HOSTNAME/$CURRENT_DATE
		myecho
	fi
	# purge local files
	if [ "$CONF_LOCAL_PURGE_DELAY" != "" ]; then
		myecho "$(ansi rev)Purge local files$(ansi reset)"
		PURGE_DATE=`date --date="$CONF_LOCAL_PURGE_DELAY ago" +%Y-%m-%d`
		rm -rf $CONF_LOCAL_PATH/$PURGE_DATE
	fi
	# purge files on Amazon S3
	if [ "$CONF_S3_PURGE_DELAY" != "" ]; then
		myecho "$(ansi rev)Purge files on Amazon S3$(ansi reset)"
		PURGE_DATE=`date --date="$CONF_S3_PURGE_DELAY ago" +%Y-%m-%d`
		aws s3 rm s3://$CONF_S3_BUCKET/$CONF_LOCAL_HOSTNAME/$PURGE_DATE/ --recursive
	fi
}

if [ "$2" = "--quiet" ]; then
	QUIET_MODE=1
fi
# splashscreen
myecho
myecho " $(ansi bg magenta)                           $(ansi reset)"
myecho " $(ansi bg magenta) $(ansi reset)                         $(ansi bg magenta) $(ansi reset)"
myecho " $(ansi bg magenta) $(ansi reset)$(ansi fg cyan)          Arkiv         $(ansi reset) $(ansi bg magenta) $(ansi reset)"
myecho " $(ansi bg magenta) $(ansi reset)                         $(ansi bg magenta) $(ansi reset)"
myecho " $(ansi bg magenta)                           $(ansi reset)"
myecho

# main execution
case "$1" in
	"config")	main_config
	;;
	"exec")		main_process
	;;
	*)		main_usage
	;;
esac

