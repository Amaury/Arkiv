#!/bin/sh

# ARKIV
#
# Simple file archiver, designed to backup local files and MySQL databases and archive them on Amazon S3.
#
# Source code and documentation: https://github.com/Amaury/Arkiv
#
# © 2017, Amaury Bouchard <amaury@amaury.net>

# quiet mode
QUIET_MODE=0

# trim()
# Remove spaces at the beginning and at the end of a character string.
# @param	string	The string to trim.
trim() {
	RESULT=$(echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	echo $RESULT
}

# filenamize()
# Convert a string that contains a path to a file, and return a string suitable as a file name.
# Replace slashes and spaces by dashes.
# @param	string	The string to modify.
filenamize() {
	RESULT=$(echo "$1" | sed 's/[[:space:]]\+/-/g' | sed 's/\//-/g' | sed -e 's/^-*//' -e 's/-*$//' | sed 's/-\+/-/g')
	echo $RESULT
}

# myecho()
# Write string to stdout only if the program is attached to a terminal.
# @param	string	The string to write.
myecho() {
	if [ -t 1 ] && [ "$QUIET_MODE" = "0" ]; then
		echo "$1"
	fi
}

# ansi()
# Write ANSI-compatible statements.
# @param	string	Command:
#			- reset: Remove all decoration.
#			- bold:  Write text in bold.
#			- dim:   Write faint text.
#			- rev:   Write text in reverse video.
#			- under: Write underlined text.
#			- fg:    Set foreground color.
#			- bg:    Set background color.
# @param	string	Color (if the command was 'fg' or 'bg').
#			Could be: black, red, green, yellow, blue, magenta, cyan, white
ansi() {
	if [ "$1" = "reset" ]; then
		tput sgr0
	elif [ "$1" = "bold" ]; then
		tput bold
	elif [ "$1" = "dim" ]; then
		tput dim
	elif [ "$1" = "rev" ]; then
		tput rev
	elif [ "$1" = "under" ]; then
		tput smul
	elif [ "$1" = "fg" ]; then
		case "$2" in
			"black")	tput setaf 0
			;;
			"red")		tput setaf 1
			;;
			"green")	tput setaf 2
			;;
			"yellow")	tput setaf 3
			;;
			"blue")		tput setaf 4
			;;
			"magenta")	tput setaf 5
			;;
			"cyan")		tput setaf 6
			;;
			"white")	tput setaf 7
			;;
		esac
	elif [ "$1" = "bg" ]; then
		case "$2" in
			"black")	tput setab 0
			;;
			"red")		tput setab 1
			;;
			"green")	tput setab 2
			;;
			"yellow")	tput setab 3
			;;
			"blue")		tput setab 4
			;;
			"magenta")	tput setab 5
			;;
			"cyan")		tput setab 6
			;;
			"white")	tput setab 7
			;;
		esac
	fi
}

# main_usage()
# Show help and exit.
main_usage() {
	myecho "$(ansi bold)arkiv$(ansi reset) help|config|exec $(ansi dim)[--quiet]$(ansi reset)"
	myecho
	myecho "    $(ansi bold)help$(ansi reset)      Display this help."
	myecho "    $(ansi bold)config$(ansi reset)    Create Arkiv's configuration file."
	myecho "    $(ansi bold)exec$(ansi reset)      Backup files and databases, archive them and purge old files."
	myecho
	myecho "    $(ansi dim)--quiet$(ansi reset)    Don't write information messages."
	exit 0
}

# _create_config()
# Create the content of the configuration file.
# Uses the global variables defined elsewhere ($CONF_LOCAL_HOSTNAME, $CONF_BACKUP_PATH, etc.).
# @param	string	(optional) Visibility. Replace the MySQL password by an informative message if this parameter is set to "hide".
_create_config() {
	RESULT="CONF_LOCAL_HOSTNAME=$CONF_LOCAL_HOSTNAME
CONF_Z_TYPE=$CONF_Z_TYPE
CONF_BACKUP_PATH=$CONF_BACKUP_PATH
CONF_SRC=$CONF_SRC
CONF_MYSQL=$CONF_MYSQL"
	if [ "$CONF_MYSQL" = "yes" ]; then
		RESULT="$RESULT
CONF_MYSQL_HOST=$CONF_MYSQL_HOST
CONF_MYSQL_USER=$CONF_MYSQL_USER"
		if [ "$1" = "hide" ]; then
			RESULT="$RESULT
CONF_MYSQL_PWD=___HIDDEN_PASSWORD___"
		else
			RESULT="$RESULT
CONF_MYSQL_PWD=$CONF_MYSQL_PWD"
		fi
		RESULT="$RESULT
CONF_MYSQL_ALL_DATABASES=$CONF_MYSQL_ALL_DATABASES"
		if [ "$CONF_MYSQL_ALL_DATABASES" = "no" ]; then
			RESULT="$RESULT
CONF_MYSQL_DATABASES=$CONF_MYSQL_DATABASES"
		fi
	fi
	RESULT="$RESULT
CONF_AWS_S3=$CONF_AWS_S3"
	if [ "$CONF_AWS_S3" = "yes" ]; then
		RESULT="$RESULT
CONF_S3_BUCKET=$CONF_S3_BUCKET"
	fi
	RESULT="$RESULT
CONF_AWS_GLACIER=$CONF_AWS_GLACIER"
	if [ "$CONF_AWS_GLACIER" = "yes" ]; then
		RESULT="$RESULT
CONF_GLACIER_VAULT=$CONF_GLACIER_VAULT"
	fi
	RESULT="$RESULT
CONF_LOCAL_PURGE_DELAY=$CONF_LOCAL_PURGE_DELAY
CONF_S3_PURGE_DELAY=$CONF_S3_PURGE_DELAY"
	echo "$RESULT"
}

# main_config()
# Manage configuration.
main_config() {
	# local host
	HOST=`hostname`
	if [ "$HOST" = "" ]; then
		HOST="localhost"
	fi
	read -p " $(ansi fg yellow)Local host name? [$HOST]$(ansi reset) " ANSWER
	CONF_LOCAL_HOSTNAME=$(trim "$ANSWER")
	if [ "$CONF_LOCAL_HOSTNAME" = "" ]; then
		CONF_LOCAL_HOSTNAME="$HOST"
	fi
	# compression type
	read -p " $(ansi fg yellow)Compression type? (gzip|bzip2|xz) [xz]$(ansi reset) " ANSWER
	CONF_Z_TYPE=$(trim "$ANSWER")
	if [ "$CONF_Z_TYPE" != "gzip" ] && [ "$CONF_Z_TYPE" != "bzip2" ]; then
		CONF_Z_TYPE="xz"
	fi
	# local archive path
	read -p " $(ansi fg yellow)Path to local archives? [$(ansi reset)/var/archives$(ansi fg yellow)]$(ansi reset) " ANSWER
	CONF_BACKUP_PATH=$(trim "$ANSWER")
	if [ "$CONF_BACKUP_PATH" = "" ]; then
		CONF_BACKUP_PATH="/var/archives"
	fi
	if [ ! -d $CONF_BACKUP_PATH ]; then
		read -p " $(ansi fg yellow)Directory '$CONF_BACKUP_PATH' doesn't exist. Create it? [Y/n]$(ansi reset) " ANSWER
		if [ "$ANSWER" = "n" ] || [ "$ANSWER" = "N" ]; then
			echo " $(ansi fg red)⚠ ABORT$(ansi reset)"
			exit 1
		fi
		if ! mkdir $CONF_BACKUP_PATH; then
			echo " $(ansi fg red)⚠ Unable to create directory. ABORT$(ansi reset)"
			exit 1
		fi
		chmod 600 $CONF_BACKUP_PATH
	elif [ ! -w $CONF_BACKUP_PATH ]; then
		echo " $(ansi fg red)⚠ Directory '$CONF_BACKUP_PATH' exists but is not writable. ABORT$(ansi reset)"
		exit 1
	fi
	# path to backup
	read -p " $(ansi fg yellow)Paths to backup? (separated with spaces) [/etc /home]$(ansi reset) " ANSWER
	CONF_SRC=$(trim "$ANSWER")
	if [ "$CONF_SRC" = "" ]; then
		CONF_SRC="/etc /home"
	fi
	# MySQL
	CONF_MYSQL="no"
	read -p " $(ansi fg yellow)Backup MySQL databases? [Y/n]$(ansi reset) " ANSWER
	if [ "$ANSWER" != "n" ] && [ "$ANSWER" != "N" ]; then
		CONF_MYSQL="yes"
		read -p " $(ansi fg yellow)MySQL hostname? [localhost]$(ansi reset) " ANSWER
		CONF_MYSQL_HOST=$(trim "$ANSWER")
		if [ "$CONF_MYSQL_HOST" = "" ]; then
			CONF_MYSQL_HOST="localhost"
		fi
		read -p " $(ansi fg yellow)MySQL user? [root] $(ansi reset) " ANSWER
		CONF_MYSQL_USER=$(trim "$ANSWER")
		if [ "$CONF_MYSQL_USER" = "" ]; then
			CONF_MYSQL_USER="root"
		fi
		read -s -p " $(ansi fg yellow)MySQL password?$(ansi reset) " ANSWER
		CONF_MYSQL_PWD=$(trim "$ANSWER")
		if [ "$CONF_MYSQL_PWD" = "" ]; then
			echo " $(ansi fg red)⚠ Empty password. ABORT$(ansi reset)"
			exit 1
		fi
		echo
		read -p " $(ansi fg yellow)Do you want to backup all databases readable by this user? [Y/n] (otherwise you will have to give a list of database names)$(ansi reset) " ANSWER
		ANSWER=$(trim "$ANSWER")
		CONF_MYSQL_ALL_DATABASES="yes"
		if [ "$ANSWER" = "n" ] || [ "$ANSWER" = "N" ]; then
			CONF_MYSQL_ALL_DATABASES="no"
			read -p " $(ansi fg yellow)List of databases? (separated with spaces)$(ansi reset) " ANSWER
			CONF_MYSQL_DATABASES=$(trim "$ANSWER")
			if [ "$CONF_MYSQL_DATABASES" = "" ]; then
				echo " $(ansi fg red)⚠ No database to backup. ABORT$(ansi reset)"
				exit 1
			fi
		fi
	fi
	# Amazon S3 + Glacier
	CONF_AWS_S3="no"
	CONF_AWS_GLACIER="no"
	read -p " $(ansi fg yellow)Archive to Amazon S3? [Y/n]$(ansi reset) " ANSWER
	if [ "$ANSWER" != "n" ] && [ "$ANSWER" != "N" ]; then
		CONF_AWS_S3="yes"
		read -p " $(ansi fg yellow)S3 Bucket name?$(ansi reset) " ANSWER
		CONF_S3_BUCKET=$(trim "$ANSWER")
		if [ "$CONF_S3_BUCKET" = "" ]; then
			echo " $(ansi fg red)⚠ Empty bucket name. ABORT$(ansi reset)"
			exit 1
		fi
		read -p " $(ansi fg yellow)Archive to Amazon Glacier? [Y/n]$(ansi reset) " ANSWER
		if [ "$ANSWER" != "n" ] && [ "$ANSWER" != "N" ]; then
			CONF_AWS_GLACIER="yes"
			read -p " $(ansi fg yellow)Glacier Vault name?$(ansi reset) " ANSWER
			CONF_GLACIER_VAULT=$(trim "$ANSWER")
			if [ "$CONF_GLACIER_VAULT" = "" ]; then
				echo " $(ansi fg red)⚠ Empty vault name. ABORT$(ansi reset)"
				exit 1
			fi
		fi
	fi
	# local purge
	read -p " $(ansi fg yellow)Delay for local purge?$(ansi reset) $(ansi dim)(examples: \"$(ansi reset)3 days$(ansi dim)\" \"$(ansi reset)2 weeks$(ansi dim)\" \"$(ansi reset)2 months$(ansi dim)\")$(ansi reset) " ANSWER
	CONF_LOCAL_PURGE_DELAY=$(trim "$ANSWER")
	if [ "$CONF_LOCAL_PURGE_DELAY" = "" ]; then
		read -p " $(ansi fg red)⚠ Are you sure you want to never purge any backup file? [y/N] " ANSWER
		if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
			echo " $(ansi fg red)⚠ Empty purge delay. ABORT$(ansi reset)"
			exit 1
		fi
	fi
	# S3 purge
	read -p " $(ansi fg yellow)Delay for Amazon S3 purge?$(ansi reset) $(ansi dim)(examples: \"$(ansi reset)3 days$(ansi dim)\" \"$(ansi reset)2 weeks$(ansi dim)\" \"$(ansi reset)2 months$(ansi dim)\")$(ansi reset) " ANSWER
	CONF_S3_PURGE_DELAY=$(trim "$ANSWER")
	if [ "$CONF_S3_PURGE_DELAY" = "" ]; then
		read -p " $(ansi fg red)⚠ Are you sure you want to never purge any archived file? [y/N] " ANSWER
		if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
			echo " $(ansi fg red)⚠ Empty purge delay. ABORT$(ansi reset)"
			exit 1
		fi
	fi
	# create result
	RESULT="$(_create_config hide)"
	# display result
	echo
	echo " $(ansi fg yellow)HERE IS THE CONTENT THAT WILL BE WRITTEN$(ansi reset)"
	echo "$(ansi dim)$RESULT$(ansi reset)"
	echo
	# write content
	read -p " $(ansi fg yellow)Ready to erase file '$(ansi reset)~/.arkiv$(ansi fg yellow)' and rebuild it? [y/N]$(ansi reset) " ANSWER
	ANSWER=$(trim "$ANSWER")
	if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
		echo " $(ansi fg red)⚠ ABORT$(ansi reset)"
		exit 1
	fi
	if ! rm ~/.arkiv ||
	   ! touch ~/.arkiv ||
	   ! chmod 600 ~/.arkiv; then
		echo " $(ansi fg red)⚠ Unable to manage the file '$(ansi reset)~/.arkiv$(ansi fg red)'. ABORT$(ansi reset)"
		exit 1
	fi
	RESULT="$(_create_config)"
	echo "$RESULT" >> ~/.arkiv
	# crontab
	IN_CRONTAB=`crontab -l 2>/dev/null | grep arkiv | wc -l`
	if [ "$IN_CRONTAB" = "0" ]; then
		echo
		read -p " $(ansi fg yellow)Do you want to add execution in Crontab? [Y/n]$(ansi reset) " ANSWER
		ANSWER=$(trim "$ANSWER")
		if [ "$ANSWER" != "n" ] && [ "$ANSWER" != "N" ]; then
			ARKIV_EXEC_PATH="$PWD"
			read -p " $(ansi fg yellow)Path to the$(ansi reset) Arkiv $(ansi fg yellow)executable program [$ARKIV_EXEC_PATH]$(ansi reset) " ANSWER
			ANSWER=$(trim "$ANSWER")
			if [ "$ANSWER" != "" ]; then
				ARKIV_EXEC_PATH="$ANSWER"
			fi
			if [ ! -x "$ARKIV_EXEC_PATH/arkiv" ]; then
				echo " $(ansi fg red)⚠ Unable to find the file '$(ansi reset)$ARKIV_EXEC_PATH/arkiv$(ansi fg red)'. ABORT$(ansi reset)"
				exit 1
			fi
			echo " $(ansi fg red)⚠ The execution is set to everyday at midnight. You can change it by editing the Crontab.$(ansi reset)"
			(crontab -l 2>/dev/null; echo; echo "# ARKIV backup"; echo "0 0 * * * $ARKIV_EXEC_PATH/arkiv") | crontab -
		fi
	fi
}

# exec_process()
# Backup files, archive and purge.
exec_process() {
	# configuration
	if [ ! -r ~/.arkiv ]; then
		myecho "$(ansi fg red)⚠ Unable to read file '$(ansi reset)~/.arkiv$(ansi fg red)'. ABORT$(ansi reset)"
		exit 1
	else
		. ~/.arkiv
	fi
	# create destination directory
	CURRENT_DATE=`date +%Y-%m-%d`
	mkdir -p "$CONF_BACKUP_PATH/$CURRENT_DATE"
	if [ $? -ne 0 ]; then
		myecho "$(ansi fg red)⚠ Unable to create directory '$(ansi reset)$CONF_BACKUP_PATH/$CURRENT_DATE$(ansi fg red)'. ABORT$(ansi reset)"
		exit 1
	fi
	# list of created files
	FILESLIST=""
	# backup files
	if [ "$CONF_SRC" != ""]; then
		myecho "$(ansi rev)Backup files$(ansi reset)"
		# loop on paths to backup
		for SRC in $CONF_SRC; do
			myecho "$(ansi bold)Backup path '$(ansi reset)$SRC$(ansi bold)'$(ansi reset)"
			FILENAME=$(filenamize "$SRC")
			FILEPATH="$CONF_BACKUP_PATH/$CURRENT_DATE/$FILENAME"
			if [ "$CONF_Z_TYPE" = "gzip" ]; then
				tar czf "$FILEPATH.tar.gz" "$SRC"
			elif [ "$CONF_Z_TYPE" = "bzip2" ]; then
				tar cjf "$FILEPATH.tar.bz2" "$SRC"
			else
				tar cJf "$FILEPATH.tar.xz" "$SRC"
			fi
			if [ $? -ne 0 ]; then
				myecho "$(ansi fg yellow)⚠ Unable to compress path '$SRC' to '$FILEPATH.tgz'.$(ansi reset)"
			fi
			# add to list
			FILESLIST="$FILESLIST $FILEPATH.tgz"
		done
		myecho
	fi
	# backup mysql
	if [ "$CONF_MYSQL" = "yes" ]; then
		myecho "$(ansi rev)Backup databases$(ansi reset)"
		# fetch the list of databases if needed
		if [ "$CONF_MYSQL_ALL_DATABASES" = "yes" ]; then
			CONF_MYSQL_DATABASES=`MYSQL_PWD="$CONF_MYSQL_PWD" mysql -u $CONF_MYSQL_USER -h $CONF_MYSQL_HOST -e "SHOW DATABASES;" | tr -d "| " | grep -v -e Database -e _schema -e mysql`
			if [ $? -ne 0]; then
				myecho "$(ansi fg yellow)⚠ Unable to fetch the list of databases from MySQL.$(ansi reset)"
			fi
		fi
		# loop on databases
		for DB_NAME in "$CONF_MYSQL_DATABASES"; do
			# dump MySQL database
			myecho "$(ansi bold)Backup database '$(ansi reset)$DB_NAME($ansi bold)'$(ansi reset)"
			FILEPATH="$CONF_BACKUP_PATH/$CURRENT_DATE/$DB_NAME"
			MYSQL_PWD="$CONF_MYSQL_PWD" mysqldump -u $CONF_MYSQL_USER --single-transaction --skip-lock-tables $DB_NAME -h $CONF_MYSQL_HOST > "$FILEPATH.sql"
			if [ $? -ne 0 ]; then
				myecho "$(ansi fg yellow)⚠ Unable to dump database '$(ansi reset)$DB_NAME$(ansi fg yellow)'.$(ansi reset)"
				continue
			fi
			# compress the dumped file
			myecho "$(ansi bold)Compress backup file for '$(ansi reset)$DB_NAME($ansi bold)'.$(ansi reset)"
			QUIET_PARAM=""
			if [ "$QUIET_MODE" = "1" ]; then
				QUIET_PARAM="--quiet"
			fi
			echo "$FILEPATH.sql" | xargs $CONF_Z_TYPE $QUIET_PARAM
			if [ "$CONF_Z_TYPE" = "gzip" ]; then
				GENERATED_FILE="$FILEPATH.sql.gz"
			elif [ "$CONF_Z_TYPE" = "bzip2" ]; then
				GENERATED_FILE="$FILEPATH.sql.bz2"
			else
				GENERATED_FILE="$FILEPATH.sql.xz"
			fi
			if [ $? -ne 0 ]; then
				myecho "$(ansi fg yellow)⚠ Unable to compress file '$(ansi reset)$FILEPATH.sql$(ansi fg yellow)' using '$CONF_Z_TYPE'.$(ansi reset)"
				# add to list
				FILESLIST="$FILESLIST $FILEPATH.sql"
			else
				# add to list
				FILESLIST="$FILESLIST $GENERATED_FILE"
			fi
		done
		myecho
	fi
	# compute checksums
	sha256sum "$FILESLIST" > "$CONF_BACKUP_PATH/$CURRENT_DATE/sha256sums"
	if [ $? -ne 0 ]; then
		myecho "$(ansi fg yellow)⚠ Unable to create SHA256 sum file '$CONF_BACKUP_PATH/$CURRENT_DATE/sha256sums'.$(ansi reset)"
	fi
	# archive on Amazon Glacier
	if [ "$CONF_AWS_GLACIER" = "yes" ]; then
		myecho "$(ansi rev)Archive on Amazon Glacier$(ansi reset)"
		aws glacier upload-archive --account-id - --vault-name $CONF_GLACIER_VAULT --body "$CONF_BACKUP_PATH/$CURRENT_DATE/sha256sums" > "$CONF_BACKUP_PATH/$CURRENT_DATE/sha256sums.glacier.json"
		if [ $? -ne 0 ]; then
			myecho "$(ansi fg yellow)⚠ Unable to send file '$(ansi reset)$CONF_BACKUP_PATH/$CURRENT_DATE/sha256sums$(ansi fg yellow)' to Amazon Glacier.$(ansi reset)"
		fi
		for FILE in "$FILESLIST"; do
			aws glacier upload-archive --account-id - --vault-name $CONF_GLACIER_VAULT --body "$FILE" > "$FILE.glacier.json"
			if [ $? -ne 0 ]; then
				myecho "$(ansi fg yellow)⚠ Unable to send file '$(ansi reset)$FILE$(ansi fg yellow)' to Amazon Glacier.$(ansi reset)"
			fi
		done
	fi
	# archive on Amazon S3
	if [ "$CONF_AWS_S3" = "yes" ]; then
		myecho "$(ansi rev)Archive on Amazon S3$(ansi reset)"
		aws s3 sync $CONF_BACKUP_PATH/$CURRENT_DATE s3://$CONF_S3_BUCKET/$CONF_LOCAL_HOSTNAME/$CURRENT_DATE
		if [ $? -ne 0 ]; then
			myecho "$(ansi fg yellow)⚠ Unable to copy directory '$(ansi reset)$CONF_BACKUP_PATH/$CURRENT_DATE$(ansi fg red)' to Amazon S3 '$(ansi reset)$CONF_S3_BUCKET/$CONF_LOCAL_HOSTNAME/$CURRENT_DATE$(ansi fg red)'.$(ansi reset)"
		fi
		myecho
	fi
	# purge local files
	if [ "$CONF_LOCAL_PURGE_DELAY" != "" ]; then
		myecho "$(ansi rev)Purge local files$(ansi reset)"
		PURGE_DATE=`date --date="$CONF_LOCAL_PURGE_DELAY ago" +%Y-%m-%d`
		rm -rf "$CONF_BACKUP_PATH/$PURGE_DATE"
		if [ $? -ne 0 ]; then
			myecho "$(ansi fg yellow)⚠ Unable to purge local directory '$(ansi reset)$CONF_BACKUP_PATH/$PURGE_DATE$(ansi fg red)'.$(ansi reset)"
		fi
	fi
	# purge files on Amazon S3
	if [ "$CONF_S3_PURGE_DELAY" != "" ]; then
		myecho "$(ansi rev)Purge files on Amazon S3$(ansi reset)"
		PURGE_DATE=`date --date="$CONF_S3_PURGE_DELAY ago" +%Y-%m-%d`
		aws s3 rm s3://$CONF_S3_BUCKET/$CONF_LOCAL_HOSTNAME/$PURGE_DATE/ --recursive --exclude "sha256sums" --exclude "*.glacier.json"
		if [ $? -ne 0 ]; then
			myecho "$(ansi fg yellow)⚠ Unable to purge files in directory '$(ansi reset)$CONF_S3_BUCKET/$CONF_LOCAL_HOSTNAME/$PURGE_DATE$(ansi fg red)' on Amazon S3.$(ansi reset)"
		fi
	fi
}

# management of the quiet mode
if [ "$2" = "--quiet" ]; then
	QUIET_MODE=1
fi
# splashscreen
myecho
myecho " $(ansi bg magenta)                           $(ansi reset)"
myecho " $(ansi bg magenta) $(ansi reset)                         $(ansi bg magenta) $(ansi reset)"
myecho " $(ansi bg magenta) $(ansi reset)$(ansi fg cyan)          Arkiv         $(ansi reset) $(ansi bg magenta) $(ansi reset)"
myecho " $(ansi bg magenta) $(ansi reset)                         $(ansi bg magenta) $(ansi reset)"
myecho " $(ansi bg magenta)                           $(ansi reset)"
myecho

# main execution
case "$1" in
	"config")	main_config
	;;
	"exec")		main_process
	;;
	*)		main_usage
	;;
esac

